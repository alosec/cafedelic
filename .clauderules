# Cafedelic Project Intelligence

## GitHub CLI Safety Rules

**CRITICAL**: Always use temporary file approach for GitHub comments with technical content.

### Safe Pattern (Always Use This)
```bash
cat > /tmp/gh-comment-body.md <<'EOF'
Content with `backticks`, $variables, and $(commands) are all safe here
EOF
gh issue comment NUMBER --body-file /tmp/gh-comment-body.md
rm /tmp/gh-comment-body.md
```

### Unsafe Pattern (Never Use)
```bash
# DANGER: Backticks and $ will be interpreted by shell!
gh issue comment NUMBER --body "Content with `backticks`"
```

Use the `/gh-comment` command for guided safe commenting.

## Project Philosophy
- **Austere minimalism**: Prefer inconvenience from refusing complexity over complexity itself
- **Intelligence over control**: We provide understanding, not manipulation
- **High-level abstractions only**: No low-level tmux/pane management

## Key Discoveries

### What Cafedelic IS
- A development intelligence framework
- A context analysis engine  
- A translator of opaque logs into human understanding
- An accumulator of project knowledge over time

### What Cafedelic IS NOT
- A tmux manager
- A layout tool
- A terminal launcher
- A low-level pane controller

## Architecture Patterns

### Separation of Concerns
- Cafedelic = Intelligence layer
- User's tmux = Display/layout layer
- Desktop Commander = Action layer
- MCP tools = Query interface

### Implementation Approach
- Start with proven simple solutions (bash scripts, Node.js)
- Avoid complex frameworks (learned from teemax)
- Event-driven architecture with loose coupling
- Template-based translations for maintainability

## Technical Decisions

### Core Stack
- Express.js server (minimal overhead)
- Chokidar for file watching (proven reliability)
- TypeScript for type safety
- No tmux dependencies

### Service Pattern
```typescript
// Each service has single responsibility
WatcherService    // Only watches files
TranslatorService // Only translates logs  
ActivityStore     // Only stores activities
```

## Real-World Usage Insights

### First Live Test (2025-05-25)
Monitoring actual Claude Desktop usage revealed:
- `read_multiple_files` is a common pattern for exploration
- File paths are embedded in args.paths array
- Real-time monitoring creates powerful visibility

Example output that sparked Emacs integration idea:
```
[7:09pm] Claude is exploring ~/code/teemax/memory-bank
[7:10pm] Claude used read_multiple_files
[7:10pm] Claude is reading .clauderules
```

### Emacs Integration Opportunity
The "hello world" success (log → transformation → display) opens the door for active coordination:
- Watch what files Claude accesses
- Automatically open them in Emacs
- Create synchronized development environment
- Build foundation for future caching/SQLite

## DC Log Intelligence

### Log Location
`~/.claude-server-commander/claude_tool_call.log`

### Log Format (Discovered)
Pipe-delimited format with **tab characters**: `TIMESTAMP | COMMAND \t| Arguments: JSON`
Example: `2025-05-26T19:20:59.401Z | list_directory      \t| Arguments: {"path":"/home/alex"}`

**CRITICAL**: Tab characters appear between command and arguments separator - must use regex parsing, not simple split.

### Common Commands to Translate
- read_file → "Claude is reading [filename]"
- write_file → "Claude is updating [filename]"
- execute_command → "Claude executed: [command]"
- search_code → "Claude searched for [pattern]"
- **list_directory** → "Claude is exploring [path]" (fixed parsing 2025-05-26)

### Translation Philosophy
Make the activity human-readable and meaningful, not just technically accurate.

## V3 Evolution: Task Delegation Platform (July 15, 2025)

### Core Challenge: Database Integration Gap
**Problem**: TUI shows mock data instead of real Claude Code sessions/projects
**Impact**: Delegation platform cannot function without real data
**Priority**: Must resolve database population before TUI can be useful

### Two Integration Approaches to Explore
**Claude Code Hooks**: Real-time event integration for live data capture
**WTE Pipeline**: Enhanced Watch-Transform-Execute on Claude Code logs
**Goal**: Get real CC data flowing into SQLite for TUI consumption

### TUI-First Architecture with CLI Debugging
**Primary Interface**: `cafe open textual` - Complete delegation platform
**CLI Purpose**: Debugging utilities that Claude Code can use (cafe sessions load/list)
**Not CLI-First**: TUI remains the main interface, CLI is for debugging/utilities

### Technical Implementation Status (July 15, 2025)
**COMPLETE**: Functional delegation platform skeleton with all core UI components  
**BLOCKER**: Database integration - TUI needs real data, not mock data
**NEXT**: Resolve Claude Code data → SQLite population  
**THEN**: Connect TUI to populated database
**FUTURE**: Intelligence generation with claude -p analysis

### Key Architectural Insights
**Database Population Gap**: Discovery system works but database stays empty
**TUI-First Design**: Primary interface is delegation platform, not CLI
**CLI as Debug Tool**: Commands for Claude Code to use for debugging/inspection
**Real Data Critical**: Mock data demonstrates workflow, but real data needed for function

## Lessons from Related Projects

### From Teemax
- Simple Node.js scripts beat complex TypeScript servers
- Real-time log following with position tracking works well
- Human-readable translations are highly valuable

### From Deli
- Named pane abstractions are useful but too low-level for cafedelic
- MCP tool integration patterns work well
- Focus on specific value proposition

### From TUI Development (July 11, 2025)
- **Component Architecture Works**: Modular widgets with clear responsibilities
- **Mock Data Crucial**: Essential for demonstrating workflows before real integration
- **Import Path Precision**: Textual framework requires exact import paths (containers vs widgets)
- **Message Passing Pattern**: Widget communication via Textual's message system is elegant
- **Incremental Development**: Build skeleton first, then integrate real data

## Remember
When in doubt, choose simplicity and clarity over feature completeness. Cafedelic's value is in making development transparent and understandable, not in controlling tools.


## Layout Solution Discovered (2025-05-26)

After exploring tmex extensively, found the ideal IDE layout:
- Use `tmex 131 --transpose` for consistent 5-pane structure
- Set pane names with `@pane_name` user options
- Reference panes: `tmux display -p -t '@pane_name=cafedelic-editor' '#{pane_id}'`
- File tree lives in tmux pane 1, not in emacs

Layout structure:
```
┌─────────────────────────────┐
│      Activity Monitor       │
├──────┬──────────┬──────────┤
│ Tree │  Editor  │ Terminal │
├──────┴──────────┴──────────┤
│        DC Logs              │
└─────────────────────────────┘
```

This provides predictable pane IDs (0-4) that can be named and targeted reliably.

**Emacs Output Routing (Fixed 2025-05-26)**:
- Route emacsclient output to session 9:0.2 using `tmux run-shell`
- Provides visibility into file/directory opening actions
- Falls back gracefully if target pane doesn't exist

## State Management Architecture (2025-05-26)

Implemented event-sourced state management:
- SQLite3 for persistence (no external dependencies)
- StateManager as central event hub
- Services communicate via events, not direct calls
- Database is source of truth, memory is cache

Key pattern:
```
DC Logs → WatcherService → StateManager → Database
                ↓              ↓
         TranslatorService   Events → UI Updates
```

## Small Testable Components Philosophy

Build from small, individually testable pieces:
- Each service has single responsibility
- Services extend EventEmitter for loose coupling
- Tools are simple wrappers around shell commands
- Database operations are isolated in PersistenceService

This approach creates maintainable, debuggable systems.


## Tool Deprecation Decision (2025-05-31)

### Deprecated: assign_name_to_pane Tool

**Decision**: Removed `assign_name_to_pane` from MCP tools in favor of `assign_pane_properties`

**Rationale**:
- Property-based system provides multi-dimensional pane identification
- Single-purpose naming tool was redundant with enhanced properties tool
- Cleaner API with fewer tools to maintain
- Enhanced capabilities: source (user/claude-desktop/claude-code/system) + role (editor/terminal/logs/tests/debug/monitor)

**Implementation**:
- Removed from both stdio (mcp-stdio.js) and HTTP (src/mcp-tools/mcp-server.ts) MCP servers
- Updated documentation to remove deprecated references
- Added migration section explaining the transition
- Underlying scripts remain functional (assign-properties.sh handles both cases)

**Benefits**:
- Simplified tool set - one way to assign pane properties
- Enhanced discovery capabilities with source/role combinations  
- Better support for multi-assistant workflows
- Future-proof property system for complex development scenarios

**Migration Pattern**:
```javascript
// OLD (deprecated)
assign_name_to_pane(session, window, pane, name)

// NEW (enhanced)
assign_pane_properties(session, window, pane, {
  name: name,           // Optional
  source: 'user',       // Optional: who owns this pane
  role: 'editor'        // Optional: what this pane does
})
```

### Deprecated: list_named_panes Tool

**Decision**: Removed `list_named_panes` from MCP tools in favor of `list_panes_by_properties`

**Rationale**:
- Property-based listing provides superior functionality and accuracy
- Shows comprehensive property information (name, source, role, status)
- Better detection of stale vs active panes
- Supports filtering by any property combination
- More maintainable single approach to pane discovery

**Implementation**:
- Removed from both stdio (mcp-stdio.js) and HTTP (src/mcp-tools/mcp-server.ts) MCP servers
- Removed implementation function from pane-tools.ts
- Underlying list-named-panes.sh script remains for backward compatibility

**Benefits**:
- More accurate status reporting (ACTIVE vs STALE)
- Comprehensive property display shows all pane metadata
- Filtering capabilities (by source, role, or name)
- Single discovery mechanism reduces API complexity
- Better support for multi-assistant property-based workflows

**Migration Pattern**:
```javascript
// OLD (deprecated)
list_named_panes()
// Returns: Basic name mapping with potential stale entries

// NEW (enhanced)
list_panes_by_properties()
// Returns: Comprehensive property info with accurate status
// Optional: list_panes_by_properties({ source: 'claude-desktop' })
// Optional: list_panes_by_properties({ role: 'editor' })
```

**Key Learning**: When building enhanced replacements, deprecate legacy tools cleanly rather than maintaining dual APIs. The enhanced tools provide all the functionality of the simple tools plus significant additional capabilities.

## Pane Server Auto-Revert Configuration (2025-05-31)

### Problem: WTE Workflow Friction
The Watch-Transform-Execute (WTE) system automatically opens files that Claude accesses, but Emacs would prompt "File changed on disk. Revert buffer?" This broke the seamless auto-open experience.

### Solution: Global Auto-Revert in Pane Servers
**Philosophy**: Treat pane-servers as "Claude's workspace" where everything auto-syncs.

**Implementation** in `pane-emacs-init.el`:
```elisp
;; Enable global auto-revert for seamless WTE integration
;; This makes the pane "Claude's workspace" where files auto-sync
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)        ; No "reverted" messages
(setq auto-revert-check-vc-info t)    ; Also revert version control info
```

**Benefits**:
- Completely seamless WTE file opening workflow
- No user prompts or interruptions
- Pane servers become "live updating" AI workspaces
- Maintains clear separation: panes auto-sync, main Emacs doesn't
- Consistent with treating panes as Claude's dedicated environment

**User Experience**: Files in pane servers now automatically reflect any external changes, creating a transparent, live development environment perfectly suited for AI-assisted development.

**Pattern**: When AI workflows need different behavior than traditional user workflows, configure the AI-specific environment (pane servers) rather than compromising the general user environment (main Emacs).

