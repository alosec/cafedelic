# Tmux Pane Management Guide for Cafedelic MCP Server

This guide explains how to use Cafedelic's MCP (Model Context Protocol) server to manage tmux panes through a property-based system. The system enables AI assistants like Claude Desktop and Claude Code to dynamically interact with your development environment.

## Table of Contents

1. [Overview](#overview)
2. [Architecture](#architecture)
3. [Setup and Configuration](#setup-and-configuration)
4. [Available MCP Tools](#available-mcp-tools)
5. [Property-Based Pane Management](#property-based-pane-management)
6. [Practical Examples](#practical-examples)
7. [Troubleshooting](#troubleshooting)
8. [Best Practices](#best-practices)

## Overview

Cafedelic's pane management system provides:

- **Dynamic Pane Naming**: Assign meaningful names to tmux panes instead of using coordinates
- **Property-Based Discovery**: Find panes by their semantic properties (source, role)
- **MCP Integration**: AI assistants can interact with panes through standardized tools
- **Flexible Control**: Assign and query pane properties dynamically

### Key Benefits

- No hard-coded pane destinations in scripts
- AI assistants can read from and write to specific panes
- Semantic pane discovery based on properties
- Easy reconfiguration without code changes

## Architecture

The system consists of several components:

```
┌─────────────────────┐     ┌─────────────────────┐
│   Claude Desktop    │     │    Claude Code      │
│  (uses stdio MCP)   │     │   (uses MCP tools)  │
└──────────┬──────────┘     └──────────┬──────────┘
           │                           │
           ▼                           ▼
┌─────────────────────────────────────────────────┐
│              MCP Server Layer                    │
│  ┌─────────────────┐    ┌───────────────────┐  │
│  │ mcp-stdio.js    │    │ src/mcp-server.ts │  │
│  │ (stdio server)  │    │ (HTTP server)     │  │
│  └────────┬────────┘    └─────────┬─────────┘  │
│           └────────────┬───────────┘            │
│                        ▼                        │
│              ┌─────────────────┐               │
│              │  pane-tools.ts  │               │
│              │ (tool handlers) │               │
│              └────────┬────────┘               │
└───────────────────────┼─────────────────────────┘
                        ▼
        ┌───────────────────────────────┐
        │    Shell Scripts Layer        │
        │  scripts/pane-management/     │
        │  scripts/pane-properties/     │
        └───────────────┬───────────────┘
                        ▼
        ┌───────────────────────────────┐
        │      Tmux Panes               │
        │  (your actual terminals)      │
        └───────────────────────────────┘
```
│              │  pane-tools.ts  │               │
│              │ (tool handlers) │               │
│              └────────┬────────┘               │
└───────────────────────┼─────────────────────────┘
                        ▼
        ┌───────────────────────────────┐
        │    Shell Scripts Layer        │
        │  scripts/pane-management/     │
        │  scripts/pane-properties/     │
        └───────────────┬───────────────┘
                        ▼
        ┌───────────────────────────────┐
        │      Tmux Panes               │
        │  (your actual terminals)      │
        └───────────────────────────────┘
```

### Storage Locations

Configuration files are stored in `~/.cafedelic/`:

- **`pane-names`**: Maps custom names to pane coordinates (for backward compatibility)

Pane properties are stored directly in tmux as user options:
- `@pane_name`: Custom name for the pane
- `@source`: Source context (user, claude-desktop, claude-code, system)
- `@role`: Semantic role (editor, terminal, logs, tests, debug, monitor)

## Setup and Configuration

### 1. Starting the MCP Server

For Claude Desktop integration (stdio mode):
```bash
# Start the stdio server (usually configured in Claude Desktop)
node mcp-stdio.js
```

For HTTP API access:
```bash
# Start the HTTP server on port 3001
npm run start
```

### 2. Initial Pane Setup

First, create your tmux layout:
```bash
# Create a new tmux session
tmux new-session -s dev

# Split into panes as needed
# Ctrl-B % (vertical split)
# Ctrl-B " (horizontal split)
```

### 3. Assigning Properties to Your Panes

Use the MCP tools to assign properties to panes. From Claude Desktop or through the API:

```javascript
// Example: Assign properties to the editor pane
await mcp.callTool('assign_pane_properties', {
  session: 'dev',
  window: 0,
  pane: 0,
  name: 'editor',
  source: 'user',
  role: 'editor'
});
```

// Assign properties to other panes
await mcp.callTool('assign_pane_properties', {
  session: 'dev',
  window: 0,
  pane: 1,
  name: 'terminal',
  source: 'user',
  role: 'terminal'
});

await mcp.callTool('assign_pane_properties', {
  session: 'dev',
  window: 0,
  pane: 2,
  name: 'logs',
  source: 'system',
  role: 'logs'
});

## Available MCP Tools

### Pane Property Management

#### `assign_pane_properties`
Assigns properties to a tmux pane - the primary tool for pane management.

**Parameters:**
- `session`: Tmux session name
- `window`: Window name or index
- `pane`: Pane index (0-based)
- `name`: Custom name (optional)
- `source`: Source context (optional: user, claude-desktop, claude-code, system)
- `role`: Semantic role (optional: editor, terminal, logs, tests, debug, monitor)

**Example:**
```javascript
{
  "session": "dev",
  "window": 0,
  "pane": 1,
  "name": "main-editor",
  "source": "user",
  "role": "editor"
}
```

### Property Discovery Tools

#### `list_panes_by_properties`
Filter and list panes by their assigned properties.

**Parameters:**
- `source`: Filter by source (optional)
- `role`: Filter by role (optional)
- `name`: Filter by name (optional)

**Example:**
```javascript
// Find all editor panes
{
  "role": "editor"
}

// Find all panes from claude-code
{
  "source": "claude-code"
}
```

#### `find_pane_by_source_and_role`
Find a specific pane using source and role combination.

**Parameters:**
- `source`: Source to find (required)
- `role`: Role to find (required)

**Example:**
```javascript
{
  "source": "user",
  "role": "terminal"
}
```

#### `list_named_panes`
List all panes that have been assigned names or properties.

**Returns:**
```
Named Panes:
- editor: dev:0.0 (active) - Running: nvim
- terminal: dev:0.1 - Running: bash
- logs: dev:0.2 - Running: tail -f app.log
```

### Pane Interaction

#### `read_pane_by_name`
Read the last N lines from a named pane.

**Parameters:**
- `name`: Pane name
- `lines`: Number of lines to read (default: 100)

**Example:**
```javascript
{
  "name": "logs",
  "lines": 50
}
```

#### `send_keys_to_pane`
Send text to a named pane.

**Parameters:**
- `name`: Pane name
- `text`: Text to send

**Example:**
```javascript
{
  "name": "terminal",
  "text": "npm run test"
}
```

#### `send_special_key_to_pane`
Send special keys to a pane.

**Parameters:**
- `name`: Pane name
- `key`: Special key (enter, escape, tab, ctrl-c, etc.)

**Supported Keys:**
- enter, escape, tab
- ctrl-c, ctrl-d, ctrl-z
- up, down, left, right
- home, end, page-up, page-down

#### `send_ctrl_c_to_pane_by_name`
Specialized Ctrl-C sender with double-tap option.

**Parameters:**
- `name`: Pane name
- `double_tap`: Send Ctrl-C twice (for exiting certain apps)

#### `get_details_for_pane_by_name`
Gets detailed information about a named pane.

**Returns:**
```javascript
{
  "name": "editor",
  "coordinates": "dev:0.0",
  "command": "nvim",
  "dimensions": "80x24",
  "active": true
}
```

### Migration from Legacy Tools

The `assign_name_to_pane` tool has been **deprecated** in favor of the more powerful `assign_pane_properties` tool. The property-based approach provides:

- **Multi-dimensional identification**: Use source and role together
- **Better fallback logic**: Find appropriate panes when specific ones don't exist  
- **Future compatibility**: Supports complex development workflows

**Migration Example:**

```javascript
// OLD (deprecated - no longer available)
await mcp.callTool('assign_name_to_pane', {
  session: 'dev', window: 0, pane: 1, name: 'editor'
});

// NEW (recommended)
await mcp.callTool('assign_pane_properties', {
  session: 'dev', window: 0, pane: 1, 
  name: 'editor',
  source: 'user',
  role: 'editor'
});
```
